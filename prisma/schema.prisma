generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id
  username          String              @unique
  firstName         String?
  lastName          String?
  avatar            String?
  cover             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  games             Game[]
  GameParticipant   GameParticipant[]
  Leaderboard       Leaderboard[]
  Post              Post[]
  ratings           Rating[]
  SportsPredictions SportsPredictions[]
}

model SportsEvents {
  id                Int                 @id @default(autoincrement())
  sport             String
  homeTeam          String
  awayTeam          String
  homeTeamLogo      String?
  awayTeamLogo      String?
  homeScore         Int?
  awayScore         Int?
  time              DateTime
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  SportsPredictions SportsPredictions[]
}

model SportsPredictions {
  id            Int          @id @default(autoincrement())
  userId        String
  sportsEventId Int
  homeScore     Int
  awayScore     Int
  eventScore    Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  sportsEvent   SportsEvents @relation(fields: [sportsEventId], references: [id])
  user          User         @relation(fields: [userId], references: [id])

  @@index([sportsEventId], map: "SportsPredictions_sportsEventId_fkey")
  @@index([userId], map: "SportsPredictions_userId_fkey")
}

model Leaderboard {
  id        Int      @id @default(autoincrement())
  userId    String
  points    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Leaderboard_userId_fkey")
}

model BoardGame {
  id          Int      @id @default(autoincrement())
  name        String
  rating      Float?
  difficulty  String?
  image       String?
  length      Int?
  timesPlayed Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  gamesPlayed Game[]
  Post        Post[]
  ratings     Rating[]
}

model Movie {
  id          Int       @id @default(autoincrement())
  name        String
  rating      Float?
  genreId     Int?
  mpaaRating  String?
  director    String?
  releaseDate DateTime?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  genre       Genre?    @relation(fields: [genreId], references: [id])
  Post        Post[]
  ratings     Rating[]

  @@index([genreId], map: "Movie_genreId_fkey")
}

model Book {
  id        Int      @id @default(autoincrement())
  name      String
  author    String
  genreId   Int?
  rating    Float?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  genre     Genre?   @relation(fields: [genreId], references: [id])
  Post      Post[]
  ratings   Rating[]

  @@index([genreId], map: "Book_genreId_fkey")
}

model Rating {
  id          Int        @id @default(autoincrement())
  userId      String
  boardGameId Int?
  movieId     Int?
  bookId      Int?
  rating      Float
  createdAt   DateTime   @default(now())
  Post        Post[]
  boardGame   BoardGame? @relation(fields: [boardGameId], references: [id])
  book        Book?      @relation(fields: [bookId], references: [id])
  movie       Movie?     @relation(fields: [movieId], references: [id])
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, boardGameId])
  @@unique([userId, movieId])
  @@unique([userId, bookId])
  @@index([boardGameId], map: "Rating_boardGameId_fkey")
  @@index([bookId], map: "Rating_bookId_fkey")
  @@index([movieId], map: "Rating_movieId_fkey")
}

model Game {
  id           Int               @id @default(autoincrement())
  boardGameId  Int
  winnerUserId String
  playDate     DateTime
  playDuration Int
  image        String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  boardGame    BoardGame         @relation(fields: [boardGameId], references: [id])
  winner       User              @relation(fields: [winnerUserId], references: [id])
  participants GameParticipant[]
  Post         Post[]

  @@index([boardGameId], map: "Game_boardGameId_fkey")
  @@index([winnerUserId], map: "Game_winnerUserId_fkey")
}

model GameParticipant {
  id        Int      @id @default(autoincrement())
  gameId    Int
  userId    String
  createdAt DateTime @default(now())
  score     Int
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([gameId, userId])
  @@index([userId], map: "GameParticipant_userId_fkey")
}

model Genre {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Book      Book[]
  Movie     Movie[]
}

model Post {
  id          Int        @id @default(autoincrement())
  userId      String
  title       String
  content     String
  image       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  boardGameId Int?
  movieId     Int?
  bookId      Int?
  ratingId    Int?
  gameId      Int?
  boardGame   BoardGame? @relation(fields: [boardGameId], references: [id])
  book        Book?      @relation(fields: [bookId], references: [id])
  game        Game?      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  movie       Movie?     @relation(fields: [movieId], references: [id])
  rating      Rating?    @relation(fields: [ratingId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id])

  @@index([boardGameId], map: "Post_boardGameId_fkey")
  @@index([bookId], map: "Post_bookId_fkey")
  @@index([gameId], map: "Post_gameId_fkey")
  @@index([movieId], map: "Post_movieId_fkey")
  @@index([ratingId], map: "Post_ratingId_fkey")
  @@index([userId], map: "Post_userId_fkey")
}
